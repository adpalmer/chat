# This is a file.

Go:
Code that grows
with grace

Andrew Gerrand
adg@golang.org
Tumblr
Apr 20, 2012

* Hello, go

You may have heard of Go. It's my favorite language.
- compiled, compiles fast,
- statically typed, with 'duck typing' via interfaces,
- small, with a 'batteries included' standard library,
- great concurrency support,
- recently release version 1.
code ../support/hello.go

* Hello, net

code ../support/hello-net.go

* Interfaces

Hey neato! We can use Fprint to write to a net connection.
That's because a net.Conn is an io.Writer.
Put another way: net.Conn is a subset of io.Writer.
code ../support/hello-net.go /Fprint/
code ../support/defs.go /Fprint/
code ../support/defs.go /type.Writer/ /^}/
code ../support/defs.go /type.Conn/ /^}/

* An echo server

code ../support/echo-no-concurrency.go

* A concurrent echo server

code ../support/echo.go

* Goroutines

TODO: describe goroutines

* "Chat roulette"

In this talk we'll look at a simple program, based on the popular "chat roulette" site.

In short:
- a user connects,
- another user connects,
- what each user types is sent to the other.

* Design

The chat program is similar to the echo program. With echo, we copy a connection's incoming data back to the connection.

For chat, we must copy the incoming data from one user to another.  

Copying the data is easy. As in real life, the hard part is matching one conversation partner with another.

TOOD: diagram

* Channels

TODO: describe channels

* Select

TODO: describe select

* Modifying echo to create chat

In the accept loop, we replace the call to io.Copy with a call to a new function: mux.

code ../support/echo.go /Accept/ /go/
code ../support/chat-simple.go /Accept/ /go/

* The matcher

The mux function simultaneously tries to send *and* receive a connection on the partner channel.
- If the send succeeds, the connection has been handed off to another goroutine, so the function exits and the goroutine shuts down.
- If the receive succeeds, a connection has been received from another goroutine. The current goroutine then has two connections, so it starts a chat session between them.

code ../support/chat-simple.go /var.partner/ /^}/

* The conversation

The chat function sends a greeting to each connection and then copies data from one to the other, and vice versa.

Notice that it launches another goroutine so that the copy operations may happen concurrently.

code ../support/chat-simple.go /func.chat/ /^}/

* Demo

* Error handling

code ../tcp/chat.go /func.chat/ /^}/
code ../tcp/chat.go /func.cp/ /^}/

* Demo

* Taking it to the web 

"Cute program," you say, "But who wants to chat via a raw TCP connection?"

Good point. Let's modernize this by turning it a web application.

Instead of TCP sockets, we'll use websockets. Websocket support for Go is available via the websocket package in the net sub-repository.

We'll serve the user interface with Go's built-in "net/http" package.

* Using the http and weboscket packages

code ../http/chat.go /package/ /^}/

* Serving the HTML and JavaScript

code ../http/html.go /import/ /<script>/
code ../http/html.go /websocket.=/ /onClose/
code ../http/html.go /<\/html>/ $
code ../http/chat.go /func.rootHandler/ /^}/

* Adding a Socket type

code ../http/chat.go /type.Socket/ /^}/
code ../http/chat.go /func.socketHandler/ /^}/

* Embedding

TODO: explain

* Adapting the existing code

Minimal changes to the existing code are needed to use a Socket instead of an io.ReadWriteCloser.
- The partner channel now carries Sockets.
- The mux function is identical except for the type of c.
code ../http/chat.go /var.partner/
code ../http/chat.go /func.mux/ /^}/

* Adapting the existing code

Instead of calling Close, the chat function sends a value on the done channel, permitting the socketHandler to return.
code ../http/chat.go /func.chat/ /^}/
code ../http/chat.go /func.socketHandler/ /^}/

* Relieving loneliness

What if you connect, but there's noone there?

Wouldn't it be nice if we could synthesize a chat partner?

Let's do it.

* Generating text with markov chains

code ../support/markov.txt

* Generating text with markov chains

Forunately, the Go docs include a markov chain implementation:
http://golang.org/doc/codewalk/markov/

We'll use a version that has been modified to be safe for concurrent use.
code ../markov/markov.go /Chain/ /{/
code ../markov/markov.go /Write/ /{/
code ../markov/markov.go /Generate/ /{/

* Feeding the chain

We will use all text that enters the system to build the markov chains. To do this we split the Socket into a Reader and a Writer, and feed all incoming data to the Chain instance.
code ../markov/chat.go /type.Socket/ /^}/
code ../markov/chat.go /var.chain/ /^}/

* The markov bot

code ../markov/chat.go /markovBot.returns/ /^}/

* Integrating the markov bot

The bot should jump in if a real partner doesn't join.
To do this, we add a case to the select that triggers after 10 seconds, starting a chat between the user's Socket and a markovBot.

The chat function remains untouched.
code ../markov/chat.go /func.mux/ /^}/

* Demo

